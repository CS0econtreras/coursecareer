src:
 that is where we will do most our work with all our files

package.json:
    file in JavaScript is a file that specifies the dependencies, metadata, and scripts of a JavaScript project.

components and props:
    A function that can be called in the export default component multiple times name must start with a cap
    create a return (<div> <Name /> </div>);
    components return jsx html code that allows us to embed JavaScript components inside of it 
    props are a parameter in the component function 
    function Text ({ content }){ return <p>{content} </p>;}
    return (<div> 
    <Text content="hello world" />
    <Text content="my name is Eazy" />
    </div>);
    Output = hello world "endl" my name is Eazy"
    we also pass bools or arrays into a set of {}
running react:
    I need to be in my app directory
    development server "npm run dev": this will run our development server so we can see the app
    in the our browser.

Conditional rendering:
    const button = !following ? (<button>Follow</button>) : (<button>Unfollow</button>);

./ Directory refence

className:
    use this to apply styles 
.map:
    lets me iterate through each element in my array and for each one return a jsx or component that we can dispay to represent them

useState and useEffect also known as hooks
    lets us update and rerender things like count in our programs
    useEffect helps us detect when any state or value changes
    state, useEffect hooks, then any functions

NextJSRouter
    way to set up different pages for our website and have different functional components
    page.js needs to be named that by default
    layout.js is wrapping the entire component we have for the page in a specific layout 
    set up roots by creating new directory in the src foulder and create a js file named page inside of it 
    name the dir what you want the page to be called and each dir needs a page.js
    we can also nest our roots
    dynamic route dir user/[id]
    import Link from "next/link" 
    <Link href="/contact">Contact</Link>
    rout to user = <Link href= "/user/123"> User 123</Link>
    progrmaticly without the using the link= input type="text" placeholdr="user id" value={userId} />
    for the line above i need a userState named userId and create the onChange