JavaScript Promises
    used to inegrate frontend and back end with an api
    we get resolved promise or a rejected Promise 
    example:
        const p = new Promise((resolve, reject) => {
            if (true){
                setTimeout(() => resolved("it worked"), 2000)
            }else{
                reject("it failed")
            }
        });

        p.then((datta) => {
            consle.log(data);
        }).catch((error) => {
            consle.log(error);
        });

        consle.log(p);

Asynchronous

        const addFriend = new Promise((resolve, reject), => {
            setTimeout(() => { resolve({status: "success}), 2000});
        })

        async function getResult(){
            cosnle.log("Sart");
            await addFriend.then((data) => consle.log(data));
            consle.log("done")
        }

Project Ideas:
    Task manager 
    Weather forcast
    Note taking app
    Quiz app
    Blogging platform
    Book review site 
    Event planner
    recipe app
    Flash card study app
    Travel Diary
    
Forloop
        for (let i = 0; i < 5; i+) {
        console.log(i);
    }

    \\This forloop creates an object with key/property = person.name
    \\The value = friends: {friends: person.freinds, loyalFreinds: 0}
    const newPeople = {}
    for(const person of people){
        newPeople[person.name] = {friends: person.friends, loyalFriends: 0}
    }

    Use i incase of needing to keep track of the index
    Hybrid example where we keep track of the index and the value:
        const numbers = [10, 20, 30, 40];

        for (const [i, value] of numbers.entries()) {
            console.log(`Index: ${i}, Value: ${value}`);
        }
    
Getting user input 
    Run command: npm install prompt-sync
    const prompt = require('prompt-sync')(); //enter this at the top of the file to make it work
    let enterdMin = prompt("Enter smaller number: ");

Strings 
    .push("s") //this is how you push something to string
    .charAt(i) will get you the char at the index if
    for (const index of string) // i can iterate through a string
    The sentence.length property in JavaScript gives the total number of characters in the string, including:
    Letters,Spaces, Digits, Special Characters
    Getting all chars out of of a string use .toLowerCase()
        if ((char >= 'A' && char <= 'Z') || (char >= 'a' && char <= 'z') || (char >= '0' && char <= '9'))
        //This one will any char that is not a space or a command
        if (str[i] !== " " && str[i] !== ",") 


Objects
    const testObject = [{name: "tim", freinds: ["john", "sally"]}]
    The single element inside the array is an object ({}).
    This object has two properties: name and freinds.
    they have a property/key
    const newPeople = {}
    for (const person of people) {
        newPeople[person.name] = {friends: person.friends, loyalFriends: 0}
    }
    //the code above is creates an object and make the key == person.name and the values are their freinds and loyal friends
    you can use on object as a map as long as the key is a string anything more complicated will need a map

    Built in functions
    1. Object.keys()
        Gets an array of the keys (property names) of an object.
        const obj = { name: "Ezequiel", age: 25, city: "New York" };
        console.log(Object.keys(obj)); // ['name', 'age', 'city']

    2. Object.values()
        Gets an array of the values of an object.
        console.log(Object.values(obj)); // ['Ezequiel', 25, 'New York']

    3. Object.entries()
        Gets an array of [key, value] pairs.
        console.log(Object.entries(obj)); 
        // [['name', 'Ezequiel'], ['age', 25], ['city', 'New York']]

    creating a key for an object in an array:
        const books = [
        { title: 'Book A', author: 'Author 1', year: 2000 },
        { title: 'Book B', author: 'Author 2', year: 2005 },
        { title: 'Book A', author: 'Author 1', year: 2001 },
        ];


        const key = `${title} by ${author}`;

    .reduce callback function 
        Used to reduce an array to a single value or a new object by accumulating results through a callback function.
        const aggregatedBooks = books.reduce((acc, {title, author, year}) => { //books is an array of objects
        const key = `${title} by ${author}`;
        if (!acc[key]) {
            acc[key] = {title, author, years: [year]};
        }
        else {
            acc[key].years.push(year);
        }
        return acc;
    } ,{});
    //I took books from above and made it another object with key "title by author" value {with the titlet auther and year as keys 
    //and the content as the value}
    {
    'The Great Gatsby by F. Scott Fitzgerald': {
    title: 'The Great Gatsby',
    author: 'F. Scott Fitzgerald',
    years: [ 1925, 2020 ]
    },
    '1984 by George Orwell': { title: '1984', author: 'George Orwell', years: [ 1949, 1983 ] }
    }

    .map() callback function
        Used to transform each element in an array into a new form, resulting in an array of the same length.
        in this example we used the map function to take the values from the keys and make the elements in the array

        return Object.values(aggregatedBooks).map((book) => {
            return `${book.title} by ${book.author} (${book.years.join(", ")})`
        });


Grabbing values form input fields of my html file
    const todo = document.getElementById("id of inputbox").value

Array
    .includes() this will look in the array for whatever you put in the ()
    // Using the spread operator to insert all elements of array1 into array2
    const array1 = [1, 2, 3];
    const array2 = [4, 5, 6];
    const combinedArray = [...array1, ...array2];
    .length === 0 
    .reduce() is an array method, not an object function. 
    It is used to process an array and reduce it to a single value, such as a sum, product, 
    or any aggregated result, by applying a callback function to each element in the array.
    
    higher-order methods:
        forEach: For doing something with each element, no return value.
            const numbers = [1, 2, 3];
            numbers.forEach(num => {
                console.log(num * 2); // Outputs 2, 4, 6
            });

        map: For creating a new array by transforming each element.
            const numbers = [1, 2, 3];
            const doubled = numbers.map(num => num * 2); // [2, 4, 6]

        filter: For creating a new array with only elements that pass a condition.
            const numbers = [1, 2, 3, 4];
            const evens = numbers.filter(num => num % 2 === 0); // [2, 4]

        reduce: For combining all elements into a single value or object.
            const numbers = [1, 2, 3];
            const sum = numbers.reduce((acc, num) => acc + num, 0); // 6

        find: For locating the first matching element.
            const numbers = [1, 2, 3, 4];
            const firstEven = numbers.find(num => num % 2 === 0); // 2

        every: For checking if all elements meet a condition.
            const numbers = [2, 4, 6];
            const allEven = numbers.every(num => num % 2 === 0); // true

        some: For checking if at least one element meets a condition.
            const numbers = [1, 3, 4];
            const hasEven = numbers.some(num => num % 2 === 0); // true

        includes: For checking if a specific value is present.
            const fruits = ['apple', 'banana', 'orange'];
            const hasApple = fruits.includes('apple'); // true

Tuples 
    represented by using arrays 
    const tuple = [1, "Hello", true];
    same built in function as an array
    access would look like:
    tuple[0][1][2]

Map
    map creation: 
        const myMap = new Map();
    Use the set method to add or update key-value pairs: 
        myMap.set("name", "Ezequiel");
    Use the get method to retrieve the value associated with a key: 
        console.log(myMap.get("name")); // "John"
    has: Check if a key exists: 
        console.log(myMap.has("name")); // true
    size: Get the number of entries in the map:
        console.log(myMap.size);
    delete: Remove a specific key-value pair:
        myMap.delete("age");
    clear: Remove all entries:
        myMap.clear();
    Iterating Over a Map:
        for (const [key, value] of myMap) {
            console.log(`${key}: ${value}`);
        }
    keys: Get all keys:
        for (const key of myMap.keys()) {
            console.log(key);
        }
    values: Get all values:
        for (const value of myMap.values()) {
            console.log(value);
        }
    

