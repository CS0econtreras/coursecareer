JavaScript Promises
    used to inegrate frontend and back end with an api
    we get resolved promise or a rejected Promise 
    example:
        const p = new Promise((resolve, reject) => {
            if (true){
                setTimeout(() => resolved("it worked"), 2000)
            }else{
                reject("it failed")
            }
        });

        p.then((datta) => {
            consle.log(data);
        }).catch((error) => {
            consle.log(error);
        });

        consle.log(p);

Asynchronous

        const addFriend = new Promise((resolve, reject), => {
            setTimeout(() => { resolve({status: "success}), 2000});
        })

        async function getResult(){
            cosnle.log("Sart");
            await addFriend.then((data) => consle.log(data));
            consle.log("done")
        }

Project Ideas:
    Task manager 
    Weather forcast
    Note taking app
    Quiz app
    Blogging platform
    Book review site 
    Event planner
    recipe app
    Flash card study app
    Travel Diary
    
Forloop
        for (let i = 0; i < 5; i+) {
        console.log(i);
    }

    \\This forloop creates an object with key/property = person.name
    \\The value = friends: {friends: person.freinds, loyalFreinds: 0}
    const newPeople = {}
    for(const person of people){
        newPeople[person.name] = {friends: person.friends, loyalFriends: 0}
    }
    
Getting user input 
    Run command: npm install prompt-sync
    const prompt = require('prompt-sync')(); //enter this at the top of the file to make it work
    let enterdMin = prompt("Enter smaller number: ");

Strings 
    .push("s") //this is how you push something to string
    .charAt(i) will get you the char at the index if
    for (const index of string) // i can iterate through a string
    The sentence.length property in JavaScript gives the total number of characters in the string, including:
    Letters,Spaces, Digits, Special Characters

Objects
    const testObject = [{name: "tim", freinds: ["john", "sally"]}]
    The single element inside the array is an object ({}).
    This object has two properties: name and freinds.
    they have a property/key
    const newPeople = {}
    for (const person of people) {
        newPeople[person.name] = {friends: person.friends, loyalFriends: 0}
    }
    //the code above is creates an object and make the key == person.name and the values are their freinds and loyal friends
    you can use on object as a map as long as the key is a string anything more complicated will need a map

    Built in functions
    1. Object.keys()
        Gets an array of the keys (property names) of an object.
        const obj = { name: "Ezequiel", age: 25, city: "New York" };
        console.log(Object.keys(obj)); // ['name', 'age', 'city']

    2. Object.values()
        Gets an array of the values of an object.
        console.log(Object.values(obj)); // ['Ezequiel', 25, 'New York']

    3. Object.entries()
        Gets an array of [key, value] pairs.
        console.log(Object.entries(obj)); 
        // [['name', 'Ezequiel'], ['age', 25], ['city', 'New York']]

Grabbing values form input fields of my html file
    const todo = document.getElementById("id of inputbox").value

Array
    .includes() this will look in the array for whatever you put in the ()
    // Using the spread operator to insert all elements of array1 into array2
    const array1 = [1, 2, 3];
    const array2 = [4, 5, 6];
    const combinedArray = [...array1, ...array2];

Tuples 
    represented by using arrays 
    const tuple = [1, "Hello", true];
    same built in function as an array
    access would look like:
    tuple[0][1][2]

Map
    map creation: 
        const myMap = new Map();
    Use the set method to add or update key-value pairs: 
        myMap.set("name", "Ezequiel");
    Use the get method to retrieve the value associated with a key: 
        console.log(myMap.get("name")); // "John"
    has: Check if a key exists: 
        console.log(myMap.has("name")); // true
    size: Get the number of entries in the map:
        console.log(myMap.size);
    delete: Remove a specific key-value pair:
        myMap.delete("age");
    clear: Remove all entries:
        myMap.clear();
    Iterating Over a Map:
        for (const [key, value] of myMap) {
            console.log(`${key}: ${value}`);
        }
    keys: Get all keys:
        for (const key of myMap.keys()) {
            console.log(key);
        }
    values: Get all values:
        for (const value of myMap.values()) {
            console.log(value);
        }
    